---
import { getCollection } from "astro:content";
import { ClientRouter } from "astro:transitions";

interface Props {
  title: string;
}

const { title } = Astro.props;

const collections = ["base", "critiques", "consultancy"] as const;
const entries: Record<
  (typeof collections)[number],
  Awaited<ReturnType<typeof getCollection<(typeof collections)[number]>>>
> = Object.fromEntries(
  await Promise.all(
    collections.map(async (collection) => [
      collection,
      await getCollection(collection),
    ])
  )
);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"
    />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ClientRouter />
  </head>
  <body>
    <header class="container">
      <nav>
        <ul>
          <li><a href="/">CodeNames Oversight Home</a></li>
        </ul>
        <ul>
          {
            collections.map((collection) => (
              <li>
                <details class="dropdown">
                  <summary>
                    {collection.charAt(0).toUpperCase() + collection.slice(1)}
                  </summary>
                  <ul>
                    {entries[collection]
                      .toSorted((a, b) => a.id.localeCompare(b.id))
                      .map((entry) => (
                        <li>
                          <a href={`/${collection}/${entry.id}/0`}>
                            {entry.id.replace("adv-0", "adv-0.")}
                          </a>
                        </li>
                      ))}
                  </ul>
                </details>
              </li>
            ))
          }
        </ul>
      </nav>
    </header>
    <slot />
  </body>
</html>
